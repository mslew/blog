---
import MainLayout from "./MainLayout.astro";
import { Image } from "astro:assets";
import dateFormat from "dateformat";
import me from '../../public/images/me-small.jpg'
import UpArrow from "../components/UpArrow.astro";
import readingTime from "reading-time";
import Tag from "../components/Tag.astro";
import TableOfContents from "../components/TableOfContents.astro";
import PostNavigation from "../components/PostNavigation.astro";

let {
    content: {
        title,
        description, 
        tags,
        author,
        pubDate,
        image: {
            url,
            alt
        },
        updatedDate,
    },
    adjacentPosts:{
        prev,
        next
    },
    body,
    headings
} = Astro.props;
---
<MainLayout title={title}>
    <div class="flex flex-col gap-4 items-center text-center w-1/2 -xl:w-3/4 -md:w-[95%] place-self-center">
        <Image layout="responsive" width={750} height={500} inferSize={true} src={url} alt={alt}/>
        <div class="prose prose-light"><h1>{title}</h1></div>  
        <p><em>{description}</em></p>
        <div class="w-full flex flex-col items-center gap-8">
            <div class="flex flex-row items-center">
                <div class="flex flex-row items-center gap-2">
                    <Image class="rounded-full w-8 h-8" src={me} alt="me"/>
                    <p>{author}</p>
                    <p>|</p>
                    <p>{dateFormat(pubDate, "UTC:mmmm dS, yyyy")}</p>
                    <p>|</p>
                    <p>{Math.round(readingTime(body).minutes)} min read</p>
                </div>
            </div>
            {updatedDate && <p><em>Updated {dateFormat(updatedDate, "UTC:mmmm dS, yyyy")}</em></p>}
            <PostNavigation prevPost={prev} nextPost={next}/>
        </div>
        <div class="flex flex-row flex-wrap gap-4 w-3/4 justify-center pt-4 pb-4">
            {tags.map((tag: string) => 
                <Tag tag={tag} disabled={"pointer-events-auto"}/>
            )}
        </div>
        <div class="flex flex-row gap-8 xl:w-[150%] place-self-center -xl:flex-col -xl:w-full -xl:items-center">
            <aside class="w-1/4 h-full xl:sticky xl:top-8 -xl:max-h-[25vh] -xl:w-1/2 -md:w-[95%]">
                <TableOfContents headings={headings}/>
            </aside>
            <article class="prose prose-light flex flex-col w-1/2 -xl:w-3/4 -md:w-[95%] text-start">
                <slot />
            </article>
        </div>
    </>
</MainLayout>
<button id="scrollTopBtn" class="fixed right-4 bottom-4" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">
    <UpArrow class={"fill-white w-16 h-16 border p-4 rounded-3xl hover:bg-slate-500"}/>
</button>

<script>

    const copyButtonSVG = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M192 0c-41.8 0-77.4 26.7-90.5 64L64 64C28.7 64 0 92.7 0 128L0 448c0 35.3 28.7 64 64 64l256 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64l-37.5 0C269.4 26.7 233.8 0 192 0zm0 64a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM112 192l160 0c8.8 0 16 7.2 16 16s-7.2 16-16 16l-160 0c-8.8 0-16-7.2-16-16s7.2-16 16-16z"/></svg>`;
    const checkMark = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>`


    function getCodeLang(){
        const codeElements = document.querySelectorAll('pre');
        if(!codeElements) return;
        codeElements.forEach(codeElement => {
            const lang = codeElement.getAttribute('data-language');
            if (!lang) return;

            const langIndicator = document.createElement('div');
            langIndicator.className = 'code-language';
            langIndicator.textContent = lang;
            
            // Add the indicator to the pre element
            codeElement.classList.add('relative');
            codeElement.appendChild(langIndicator);
        })
        
    }

    function addCopyButton(){
        const codeElements = document.querySelectorAll('pre');
        if(!codeElements) return;
        codeElements.forEach(codeElement => {
            const copyButton = document.createElement('button');
            copyButton.className = 'copy-button';
            copyButton.innerHTML = copyButtonSVG;
            copyButton.addEventListener('click', () => {
                const code = codeElement.querySelector('code');
                if (!code || !code.textContent) return;
                navigator.clipboard.writeText(code.textContent);
                copyButton.innerHTML = checkMark;
                setTimeout(() => {
                    copyButton.innerHTML = copyButtonSVG;
                }, 2000);
            });
            codeElement.appendChild(copyButton);
        })
    }

    function setupTocOffset(){
        const header = document.querySelector('header');
        const headerHeight = header ? header.offsetHeight : 0;
		const aside = document.querySelector('aside');
        if (!aside) return;
        const windowWidth = window.innerWidth; //1280 xl screens
		if (windowWidth > 1280) {
			aside.style.paddingTop = `${headerHeight}px`;
		}else{
            aside.style.paddingTop = "0px";
        }
        const headers = document.querySelectorAll('h2, h3, h4, h5, h6');
        if (!headers) return;
        headers.forEach(header => (header as HTMLElement).style.scrollMarginTop = `${headerHeight}px`);

    }
    document.addEventListener('astro:page-load', setupTocOffset)
    document.addEventListener('astro:after-swap', setupTocOffset)
    document.addEventListener('astro:page-load', getCodeLang)
    document.addEventListener('astro:after-swap', getCodeLang)
    document.addEventListener('astro:page-load', addCopyButton)
    document.addEventListener('astro:after-swap', addCopyButton)
    window.addEventListener('resize', setupTocOffset)
</script>