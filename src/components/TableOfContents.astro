---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";
const { headings } = Astro.props;
export interface Heading {
    depth: number;
    slug: string;
    text: string;
    subheadings: Heading[];
}
function buildToc(){
        const toc: Heading[] = []
        const stack: Heading[] = []

        headings.forEach((h: Heading) => {
            const heading = { ...h, subheadings: [] }

            while (stack.length > 0 && stack[stack.length - 1].depth >= heading.depth) {
                stack.pop()
            }

            if (stack.length === 0) {
                toc.push(heading)
            } else {
                stack[stack.length - 1].subheadings.push(heading)
            }
            stack.push(heading)
        })
        return toc
    }
const toc = buildToc();
---
<div class="flex flex-col w-full">
    <p class="text-slate-300">Table of Contents</p>
    <ul id="toc-container" class="flex flex-col gap-1">
        {toc.map((heading: Heading) => 
            <TableOfContentsHeading heading={heading} />
        )}
    </ul>
</div>

<script define:vars={{ headings }}>
    function setupToc(){
        const header = document.querySelector('header');
        const headerHeight = header ? header.offsetHeight : 0;

        const observer = new IntersectionObserver(
            (sections) => {
                sections.forEach((section) => {
                    const heading = section.target.querySelector('h2, h3, h4, h5, h6')
                    if (!heading) return

                    const id = heading.getAttribute('id')
                    const link = document.querySelector(
                    `#toc-container button[id="ToC${id}"]`,
                    )
                    if (!link) return
                    const addRemove = section.isIntersecting ? 'add' : 'remove'
                    const removeOpacity = !section.isIntersecting ? 'add' : 'remove'
                    link.classList[removeOpacity]('text-opacity-25')
                    link.classList[addRemove]('font-bold', 'text-opacity-100')
                    })
                },
            {
                rootMargin: `-${headerHeight}px 0px 0px 0px`,
            },
    )

        const sections = document.querySelectorAll('.heading')
        sections.forEach((section) => {
            observer.observe(section)
        })
    }

    document.addEventListener('astro:page-load', setupToc)
    document.addEventListener('astro:after-swap', setupToc)
</script>