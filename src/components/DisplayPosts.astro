---
import type { CollectionEntry } from 'astro:content';
import PostCard from '../components/PostCard.astro';
import Tag from '../components/Tag.astro';
import { trimProps } from '../utils/trimProps';
interface Props{
    posts: CollectionEntry<'posts'>[]
    tagView?: string
}

const props = trimProps(Astro.props);
const { posts, tagView } = props;

type PostsByYear = Record<string, CollectionEntry<'posts'>[]>;

const postsByYear = posts.reduce((acc: PostsByYear, post) => {
  const year = new Date(post.data.pubDate).getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

const sortedPostsByYear = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a));
---
<div class="2xl:w-2/3 max-2xl:w-3/4 max-lg:w-[95%] place-self-center items-center flex-1">
  {tagView && <span class="text-xl w-full text-slate-400 flex justify-center items-center gap-2">Posts Tagged with <Tag tag={{tag: tagView}} disabled={"pointer-events-none"}/></span>}
  {Object.keys(sortedPostsByYear).length > 0 &&
      sortedPostsByYear.map((year) => (
        <div class="flex flex-col gap-4 items-center w-full pb-4">
          <h2 class="text-3xl text-slate-400 text-left w-2/3 max-xl:w-3/4 max-sm:w-[95%]">{year}</h2>
          {postsByYear[year].map((post) => (
              <PostCard {...post.data} body={post.body} />
          ))}
        </div>
  ))}
</div>